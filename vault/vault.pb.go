// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.1
// source: vault/vault.proto

// protoc --go_out=plugins=grpc:. *.proto

package vault

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type JsonBytes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *JsonBytes) Reset() {
	*x = JsonBytes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vault_vault_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JsonBytes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JsonBytes) ProtoMessage() {}

func (x *JsonBytes) ProtoReflect() protoreflect.Message {
	mi := &file_vault_vault_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JsonBytes.ProtoReflect.Descriptor instead.
func (*JsonBytes) Descriptor() ([]byte, []int) {
	return file_vault_vault_proto_rawDescGZIP(), []int{0}
}

func (x *JsonBytes) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type Nothing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dummy bool `protobuf:"varint,1,opt,name=dummy,proto3" json:"dummy,omitempty"`
}

func (x *Nothing) Reset() {
	*x = Nothing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vault_vault_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nothing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nothing) ProtoMessage() {}

func (x *Nothing) ProtoReflect() protoreflect.Message {
	mi := &file_vault_vault_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nothing.ProtoReflect.Descriptor instead.
func (*Nothing) Descriptor() ([]byte, []int) {
	return file_vault_vault_proto_rawDescGZIP(), []int{1}
}

func (x *Nothing) GetDummy() bool {
	if x != nil {
		return x.Dummy
	}
	return false
}

var File_vault_vault_proto protoreflect.FileDescriptor

var file_vault_vault_proto_rawDesc = []byte{
	0x0a, 0x11, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2f, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x05, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x22, 0x1f, 0x0a, 0x09, 0x4a, 0x73,
	0x6f, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x1f, 0x0a, 0x07, 0x4e,
	0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x32, 0x61, 0x0a, 0x09,
	0x4a, 0x73, 0x6f, 0x6e, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x29, 0x0a, 0x03, 0x47, 0x65, 0x74,
	0x12, 0x0e, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67,
	0x1a, 0x10, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x22, 0x00, 0x12, 0x29, 0x0a, 0x03, 0x53, 0x65, 0x74, 0x12, 0x10, 0x2e, 0x76, 0x61,
	0x75, 0x6c, 0x74, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x1a, 0x0e, 0x2e,
	0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x22, 0x00, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_vault_vault_proto_rawDescOnce sync.Once
	file_vault_vault_proto_rawDescData = file_vault_vault_proto_rawDesc
)

func file_vault_vault_proto_rawDescGZIP() []byte {
	file_vault_vault_proto_rawDescOnce.Do(func() {
		file_vault_vault_proto_rawDescData = protoimpl.X.CompressGZIP(file_vault_vault_proto_rawDescData)
	})
	return file_vault_vault_proto_rawDescData
}

var file_vault_vault_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_vault_vault_proto_goTypes = []interface{}{
	(*JsonBytes)(nil), // 0: vault.JsonBytes
	(*Nothing)(nil),   // 1: vault.Nothing
}
var file_vault_vault_proto_depIdxs = []int32{
	1, // 0: vault.JsonVault.Get:input_type -> vault.Nothing
	0, // 1: vault.JsonVault.Set:input_type -> vault.JsonBytes
	0, // 2: vault.JsonVault.Get:output_type -> vault.JsonBytes
	1, // 3: vault.JsonVault.Set:output_type -> vault.Nothing
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_vault_vault_proto_init() }
func file_vault_vault_proto_init() {
	if File_vault_vault_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_vault_vault_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JsonBytes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vault_vault_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Nothing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vault_vault_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_vault_vault_proto_goTypes,
		DependencyIndexes: file_vault_vault_proto_depIdxs,
		MessageInfos:      file_vault_vault_proto_msgTypes,
	}.Build()
	File_vault_vault_proto = out.File
	file_vault_vault_proto_rawDesc = nil
	file_vault_vault_proto_goTypes = nil
	file_vault_vault_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// JsonVaultClient is the client API for JsonVault service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type JsonVaultClient interface {
	Get(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (*JsonBytes, error)
	Set(ctx context.Context, in *JsonBytes, opts ...grpc.CallOption) (*Nothing, error)
}

type jsonVaultClient struct {
	cc grpc.ClientConnInterface
}

func NewJsonVaultClient(cc grpc.ClientConnInterface) JsonVaultClient {
	return &jsonVaultClient{cc}
}

func (c *jsonVaultClient) Get(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (*JsonBytes, error) {
	out := new(JsonBytes)
	err := c.cc.Invoke(ctx, "/vault.JsonVault/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jsonVaultClient) Set(ctx context.Context, in *JsonBytes, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/vault.JsonVault/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JsonVaultServer is the server API for JsonVault service.
type JsonVaultServer interface {
	Get(context.Context, *Nothing) (*JsonBytes, error)
	Set(context.Context, *JsonBytes) (*Nothing, error)
}

// UnimplementedJsonVaultServer can be embedded to have forward compatible implementations.
type UnimplementedJsonVaultServer struct {
}

func (*UnimplementedJsonVaultServer) Get(context.Context, *Nothing) (*JsonBytes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedJsonVaultServer) Set(context.Context, *JsonBytes) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}

func RegisterJsonVaultServer(s *grpc.Server, srv JsonVaultServer) {
	s.RegisterService(&_JsonVault_serviceDesc, srv)
}

func _JsonVault_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nothing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JsonVaultServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vault.JsonVault/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JsonVaultServer).Get(ctx, req.(*Nothing))
	}
	return interceptor(ctx, in, info, handler)
}

func _JsonVault_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JsonBytes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JsonVaultServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vault.JsonVault/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JsonVaultServer).Set(ctx, req.(*JsonBytes))
	}
	return interceptor(ctx, in, info, handler)
}

var _JsonVault_serviceDesc = grpc.ServiceDesc{
	ServiceName: "vault.JsonVault",
	HandlerType: (*JsonVaultServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _JsonVault_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _JsonVault_Set_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vault/vault.proto",
}
